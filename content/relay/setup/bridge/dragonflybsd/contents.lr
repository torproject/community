_model: page
---
color: primary
---
title: DragonFlyBSD
---
html: two-columns-page.html
---
key: 4
---
body:

### 1. Enable Automatic Software Updates

One of the most important things to keeps your relay secure is to install security updates timely and ideally automatically so you can not forget about it. Follow the instructions to enable automatic software updates for your operating system.

### 2. Bootstrap `pkg`

DragonFlyBSD's daily snapshots and releases (starting with 3.4) come with `pkg` already installed. Upgrades from earlier releases, however, will not have it. If `pkg` is missing on the system for any reason, it can be quickly bootstrapped without having to build it from source or even having **DPorts** installed:

```
# cd /usr
# make pkg-bootstrap
# rehash
# pkg-static install -y pkg
# rehash
```

##### 2.1. Recommended Steps to Setup `pkg`

Here, it will be similar to what we have on a **FreeBSD** system, and we are going to use HTTPS to fetch our packages, and updates - so here we also need an extra package to help us out; `ca_root_nss`.

```
# pkg install ca_root_nss
```

For fresh installations, the file `/usr/local/etc/pkg/repos/df-latest.conf.sample` is copied to `/usr/local/etc/pkg/repos/df-latest`. The files ending in the ".sample" extension are ignored; pkg(8) only reads files that end in ".conf" and it will read as many as it finds.

**DragonflyBSD** has 2 packages repositories:

  - Avalon (mirror-master.dragonflybsd.org);
  - Wolfpond (pkg.wolfpond.org).

We can simply edit the **URL** used to point to the repositories on `/usr/local/etc/pkg/repos/df-latest` and that's it! Remember to use **pkg+https://** for Avalon.

After applying all these changes, we update the packages list again and try to check if there's already a new update to apply:

```
# pkg update -f
# pkg upgrade -y -f
```

### 3. Install `tor` DragonflyBSD's Packages

Here we can choose to install the latest stable version, like:

```
# pkg install tor
```

  ... or install an alpha release:

```
# pkg install tor-devel
```

### 4. Install a Pluggable Transport

We are opting here to install and use **obfs4** as pluggable transport, so we are going to install the `obfs4proxy-tor` package:

```
# pkg install obfs4proxy-tor
```

### 5. Configure `/usr/local/etc/tor/torrc`

This is a very simple version of the `torrc` configuration file in order to run a Bridge on the Tor network:

```
Nickname    myNiceBridge # Change "myNiceBridge" to something you like
ContactInfo your@e-mail  # Write your e-mail and be aware it will be published
ORPort      443          # You might use a different port, should you want to
ExitRelay   0
SocksPort   0
Log notice  syslog
ExtORPort   auto
BridgeRelay 1
ServerTransportPlugin     obfs4 exec /usr/local/bin/obfs4proxy
ServerTransportListenAddr obfs4 0.0.0.0:CHANGEME
```

Replace "CHANGEME" with a port of your choice.

This port must be externally reachable and must be different from the one specified for ORPort. Please avoid port 9001 because it's commonly associated with Tor and censors may be scanning the Internet for this port.

  * One pretty important test you should consider doing is to test if we can talk **obfs4** to the port used by **ServerTransportListenAddr**. Please try our [reachability test tool for obfs4 Bridges](https://bridges.torproject.org/scan/) to check that.

### 6. Start `tor`

Here we set `tor` to start at boot time and use the setuid feature, in order to bind to lower ports like 443 (the daemon itself will still run as a regular non-privileged user).

```
# echo "tor_setuid=YES" >> /etc/rc.conf`
# echo "tor_enable=YES" >> /etc/rc.conf`
# service tor start
```

### 7. Final Notes

If you are having trouble setting up your bridge, have a look at [our help section](../../../getting-help/).
If your bridge is now running, check out the [post-install notes](../post-install/).
---
subtitle: How to deploy an obfs4 bridge on DragonflyBSD
---
section: Bridge
---
section_id: bridge
